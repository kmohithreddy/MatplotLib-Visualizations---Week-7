# -*- coding: utf-8 -*-
"""Matplotlib Traffic Network Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RdnYdh94-ZW8L7H3gAHZj1Q9Svh351nL

# Matplotlib Traffic Network Graph
"""

"""## Data Importation"""

import pandas as pd

file_path_1 = '.../transformed_segment_reports.csv'
segment_df = pd.read_csv(file_path_1)
segment_df.head(10)

file_path_2 = '.../daily_traffic_los.csv'
traffic_df = pd.read_csv(file_path_2)
traffic_df.head(10)

"""## Data Preparation"""

# Filter for street_level = 3
traffic_df = traffic_df[traffic_df['street_level'] == 3]

# Merge LOS into traffic_df
merged_df = traffic_df.merge(
    segment_df[['segment_id', 'LOS']],
    on='segment_id',
    how='left'
)

los_mapping = {
    'A': 1,
    'B': 2,
    'C': 3,
    'D': 4,
    'E': 5,
    'F': 6
}
merged_df['LOS'] = merged_df['LOS'].map(los_mapping)

# Variable Selection and Data Cleaning by Removing Null Entries
edges_df = merged_df[['s_node_id', 'e_node_id', 'length', 'street_name', 'street_type', 'LOS']].dropna()
edges_df

# Filtering for top 5000 longest segments
short_5k_edges = edges_df.nsmallest(5000, 'length')
short_5k_edges

"""## Network Graph Plotting"""

import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors
import networkx as nx


# Graph Initialization
G = nx.Graph()

# Edge and Attributes
for _, row in short_5k_edges.iterrows():
    G.add_edge(
        row['s_node_id'],
        row['e_node_id'],
        length=row['length'],
        street_name=row['street_name'],
        LOS=row['LOS'],
        street_type=row['street_type']
    )

# Mapping LOS to nodes
node_los_map = {}
node_street_type_map = {}
for node in G.nodes():
    los_values = [d['LOS'] for _, _, d in G.edges(node, data=True) if d['LOS'] is not None]
    node_los_map[node] = max(los_values) if los_values else None
    stypes = [d['street_type'] for _, _, d in G.edges(node, data=True) if d['street_type'] is not None]
    node_street_type_map[node] = max(set(stypes), key=stypes.count) if stypes else None

# Node Colors by LOS
los_values_series = pd.Series(node_los_map)
norm = plt.Normalize(vmin=los_values_series.min(), vmax=los_values_series.max())
cmap = plt.cm.viridis
node_colors = [
    cmap(norm(node_los_map[node])) if node_los_map[node] is not None else (0.5, 0.5, 0.5, 0.5)
    for node in G.nodes()
]

# Node sizes computation using bins
node_length_map = {}
for node in G.nodes():
    lengths = [d['length'] for _, _, d in G.edges(node, data=True)]
    node_length_map[node] = sum(lengths) / len(lengths) if lengths else 0

length_series = pd.Series(node_length_map)
bins = pd.qcut(length_series, q=4, labels=False, duplicates='drop')
bin_size_map = {0: 300, 1: 800, 2: 1500, 3: 2500}
node_sizes = [bin_size_map[bins[node]] for node in G.nodes()]

# Street type overlays colors
unique_street_types = list(set(node_street_type_map.values()) - {None})
street_type_color_map = {stype: plt.cm.tab20(i % 20) for i, stype in enumerate(unique_street_types)}

# Network Plot
plt.figure(figsize=(32, 18))
pos = nx.spring_layout(G, k=0.15, seed=42)

# Street type overlays
for stype, color in street_type_color_map.items():
    cluster_nodes = [n for n in G.nodes() if node_street_type_map[n] == stype]
    if len(cluster_nodes) < 3:
        continue

    points = [pos[n] for n in cluster_nodes]
    points_array = np.array(points)

    try:
        hull = ConvexHull(points_array)
        hull_points = points_array[hull.vertices]
        polygon = mpatches.Polygon(
            hull_points,
            closed=True,
            facecolor=color,
            alpha=0.15,  # translucent fill
            edgecolor=None
        )
        plt.gca().add_patch(polygon)
    except Exception:
        pass  # Skip if hull fails

# Nodes and edges
nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=node_colors)
nx.draw_networkx_edges(G, pos, alpha=0.4, width=0.8)

# Legend for Street type
overlay_patches = [mpatches.Patch(color=color, alpha=0.3, label=stype) for stype, color in street_type_color_map.items()]
plt.legend(handles=overlay_patches, title="Street Type", loc="upper right")
# Title
plt.title(
    "Traffic Network Graph - 25,000 Shortest Segments for street level 3\n",
    fontsize=14
)
plt.axis("off")
plt.show()

"""### Interaction Plot"""

import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import networkx as nx
import pandas as pd
from ipywidgets import interact

# node size and node color dictionaries
node_color_map = {n: col for n, col in zip(G.nodes(), node_colors)}
node_size_map = {n: size for n, size in zip(G.nodes(), node_sizes)}

def plot_graph(selected_street_type):
    plt.figure(figsize=(32, 18))
    ax = plt.gca()

    # Filter for nodes & edges by street type
    if selected_street_type != "All":
        nodes_to_draw = [n for n in G.nodes() if node_street_type_map[n] == selected_street_type]
        edges_to_draw = [(u, v) for u, v in G.edges() if u in nodes_to_draw and v in nodes_to_draw]
    else:
        nodes_to_draw = list(G.nodes())
        edges_to_draw = list(G.edges())

    # Draw street type overlay if not "All"
    if selected_street_type != "All" and len(nodes_to_draw) >= 3:
        points_array = np.array([pos[n] for n in nodes_to_draw])
        try:
            hull = ConvexHull(points_array)
            hull_points = points_array[hull.vertices]
            polygon = mpatches.Polygon(
                hull_points,
                closed=True,
                facecolor=street_type_color_map[selected_street_type],
                alpha=0.15
            )
            ax.add_patch(polygon)
        except Exception:
            pass

    # Edges & nodes
    nx.draw_networkx_edges(G, pos, edgelist=edges_to_draw, alpha=0.4, width=0.8)
    nx.draw_networkx_nodes(
        G, pos,
        nodelist=nodes_to_draw,
        node_size=[node_size_map[n] for n in nodes_to_draw],
        node_color=[node_color_map[n] for n in nodes_to_draw]
    )

    # Title
    plt.title(
        f"Traffic Network Graph - {selected_street_type if selected_street_type != 'All' else 'All Street Types'}\n",
        fontsize=14
    )
    plt.axis("off")
    plt.show()


# Intreraction Selection component
street_type_options = ["All"] + sorted(list(set(node_street_type_map.values()) - {None}))
interact(plot_graph, selected_street_type=street_type_options)
